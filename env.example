# .env.example

# Application Ports Configuration
# Defines a single port or a comma-separated list of ports the application will listen on.
# You can also specify a range of ports to scan.

# Common OT ports
# PORTS=23,500,502,789,999,1025,2004,2222,2455,28784,3004,48898,4999,5001,5002,5050,8500,8501,9600,9094,9999,10000,12289,17888,18245-18246,20256,20257,20547,44818,57176

# Common OT ports. Only non-priveleged ports
PORTS=1025,2004,2222,2455,28784,3004,48898,4999,5001,5002,5050,8500,8501,9600,9094,9999,10000,12289,17888,18245-18246,20256,20257,20547,44818,57176

# Connection Timeout Configuration
# Specifies the duration (in seconds) before a connection times out.
CONNECTION_TIMEOUT_SECS=3

# Port Scanning Configuration
# Determines whether the application's port scanning feature is active.
ACTIVE=false

# Specifies the ports to scan. Can include individual ports and ranges.
# Here, it scans ports 1025, a range from 1050 to 1060, 2020, and 7331.
# Please note that you need to have root privelege to scan ports under 1024.
SCAN_PORTS=1025,1050-1060,2020,7331

# Logging Level Configuration
# Sets the verbosity level of the application logs.
# Available levels are TRACE, DEBUG, INFO, WARN, ERROR, and FATAL.
# Uncomment the desired level and set it as the value for LOG_LEVEL.
# Example: LOG_LEVEL=INFO to only log messages with INFO level and above.
#    TRACE - Very detailed logs which may include high-volume information such as protocol payloads. This level is typically only enabled during development.
#    DEBUG - Information useful for developers debugging the application.
#    INFO - Runtime events (startup/shutdown), should use sparingly.
#    WARN - Use of deprecated APIs, poor use of API, 'almost' errors, other runtime situations that are undesirable or unexpected, but not necessarily "wrong".
#    ERROR - Other runtime errors or unexpected conditions.
#    FATAL - Very severe error events that will presumably lead the application to abort.
LOG_LEVEL=
